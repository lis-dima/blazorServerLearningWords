@page "/onstudy/today"

@inject OnStudyService onStudyService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    <h3>On study Today</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Lvl</th>
                <th scope="col">Word</th>
                <th scope="col">Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var onStudy in OnStudies)
            {
                <tr class="align-middle">
                    <th scope="row">@onStudy.Lvl</th>
                    <td>@onStudy.Word.Value</td>
                    <td><button @onclick="()=>RemoveOnStudy(onStudy.Word)" class="btn btn-outline-danger">remove</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private string userId = string.Empty;
    List<OnStudy> OnStudies { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var OnStudiesResp = await onStudyService.GetWordsOnStudy(true, userId, 1, 100, new());
            if (OnStudiesResp.Ok)
            {
                OnStudies = OnStudiesResp.Data;
            }
        }

    }

    async Task RemoveOnStudy(Word word)
    {
        var res = await onStudyService.RemoveWordOnStudy(userId, word.Id);
        if (res.Ok)
        {
            OnStudies.RemoveAll(os => os.WordId == word.Id);
        }
    }
}
