@page "/exercise/flash-recall"
@rendermode InteractiveServer

@inject OnStudyService onStudyService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    @if (OnStudies.Count > 0)
    {
        var onStudy = OnStudies.First();
        <h3>Exercise: Flash Recall.</h3>
        <div>
            <div>
                <p>
                    <h4>@onStudy.Word.Value</h4>
                    [@onStudy.Word.Transcription]
                    <PlayAudio EntityId="@onStudy.Word.Id" Lang="@onStudy.Word.Language" Type="EntityType.Word"></PlayAudio>
                </p>
                <span class='@(ShowExamples ? "":"d-none")'>
                    <ul>
                        @foreach (var example in onStudy.Word.Examples)
                        {
                            <ol>
                                <PlayAudio EntityId="@example.Id" Lang="@example.Language" Type="EntityType.Example"></PlayAudio>
                                @example.Value
                            </ol>
                        }
                    </ul>
                </span>
                <span class='@(ShowTranslations ? "":"d-none")'>
                    <ul>
                        @foreach (var translation in onStudy.Word.Translations)
                        {
                            <ol>
                                <PlayAudio EntityId="@translation.Id" Lang="@translation.Language" Type="EntityType.Translation"></PlayAudio>
                                @translation.Value
                            </ol>
                        }
                    </ul>
                </span>
            </div>
            <div>
                <button class='btn btn-outline-info @(ShowExamples ? "d-none" : "")' @onclick="()=>ShowExamples = true">Show examples </button>
                <button class='btn btn-outline-info @(ShowTranslations ? "d-none" : "")' @onclick="()=>ShowTranslations = true">Show Translations </button>
                <hr>
                <button @onclick="()=>HideOnStudy(onStudy)" class="btn btn-outline-secondary">Skip</button>
                <button @onclick="()=>IncreaseOnStudyLvl(onStudy)" class="btn btn-outline-success">I remember this word</button>
                <button @onclick="()=>DecreaseOnStudyLvl(onStudy)" class="btn btn-outline-warning">Temporarily hide this word</button>
            </div>
        </div>
    }
</div>

@code {

    bool ShowExamples { get; set; }
    bool ShowTranslations { get; set; }
    private string userId = string.Empty;
    List<OnStudy> OnStudies { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            WordQueryRequest wqr = new() { ShouldIncludeExamples = true, TranslationLanguages = new() { Language.Ru } };
            var OnStudiesResp = await onStudyService.GetWordsOnStudy(true, userId, 1, 100, wqr);
            if (OnStudiesResp.Ok)
            {
                PrepareOnStudy(OnStudiesResp.Data);
                // OnStudies = OnStudiesResp.Data;
            }
        }
    }

    void PrepareOnStudy(List<OnStudy> onStudies)
    {
        Sortings.Shuffle<OnStudy>(onStudies);
        OnStudies = onStudies;
    }

    void HideOnStudy(OnStudy onStudy)
    {
        ShowExamples = false;
        ShowTranslations = false;
        OnStudies.Remove(onStudy);
    }

    public async Task IncreaseOnStudyLvl(OnStudy onStudy)
    {
        await onStudyService.IncreaseOnStudyLvl(onStudy);
    }

    public async Task DecreaseOnStudyLvl(OnStudy onStudy)
    {
        await onStudyService.DecreaseOnStudyLvl(onStudy);
    }

}
